/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ModePrivateImport } from './routes/mode/private'
import { Route as ModeGuestImport } from './routes/mode/guest'
import { Route as ConnectSessionImport } from './routes/connect/$session'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ModePrivateRoute = ModePrivateImport.update({
  id: '/mode/private',
  path: '/mode/private',
  getParentRoute: () => rootRoute,
} as any)

const ModeGuestRoute = ModeGuestImport.update({
  id: '/mode/guest',
  path: '/mode/guest',
  getParentRoute: () => rootRoute,
} as any)

const ConnectSessionRoute = ConnectSessionImport.update({
  id: '/connect/$session',
  path: '/connect/$session',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/connect/$session': {
      id: '/connect/$session'
      path: '/connect/$session'
      fullPath: '/connect/$session'
      preLoaderRoute: typeof ConnectSessionImport
      parentRoute: typeof rootRoute
    }
    '/mode/guest': {
      id: '/mode/guest'
      path: '/mode/guest'
      fullPath: '/mode/guest'
      preLoaderRoute: typeof ModeGuestImport
      parentRoute: typeof rootRoute
    }
    '/mode/private': {
      id: '/mode/private'
      path: '/mode/private'
      fullPath: '/mode/private'
      preLoaderRoute: typeof ModePrivateImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/connect/$session': typeof ConnectSessionRoute
  '/mode/guest': typeof ModeGuestRoute
  '/mode/private': typeof ModePrivateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/connect/$session': typeof ConnectSessionRoute
  '/mode/guest': typeof ModeGuestRoute
  '/mode/private': typeof ModePrivateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/connect/$session': typeof ConnectSessionRoute
  '/mode/guest': typeof ModeGuestRoute
  '/mode/private': typeof ModePrivateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/connect/$session' | '/mode/guest' | '/mode/private'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/connect/$session' | '/mode/guest' | '/mode/private'
  id: '__root__' | '/' | '/connect/$session' | '/mode/guest' | '/mode/private'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConnectSessionRoute: typeof ConnectSessionRoute
  ModeGuestRoute: typeof ModeGuestRoute
  ModePrivateRoute: typeof ModePrivateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConnectSessionRoute: ConnectSessionRoute,
  ModeGuestRoute: ModeGuestRoute,
  ModePrivateRoute: ModePrivateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/connect/$session",
        "/mode/guest",
        "/mode/private"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/connect/$session": {
      "filePath": "connect/$session.tsx"
    },
    "/mode/guest": {
      "filePath": "mode/guest.tsx"
    },
    "/mode/private": {
      "filePath": "mode/private.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
